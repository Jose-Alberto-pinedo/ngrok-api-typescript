'use strict';
// Code generated by apic. DO NOT EDIT.
var __createBinding =
  (this && this.__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function () {
            return m[k];
          },
        });
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
var __exportStar =
  (this && this.__exportStar) ||
  function (m, exports) {
    for (var p in m)
      if (p !== 'default' && !Object.prototype.hasOwnProperty.call(exports, p))
        __createBinding(exports, m, p);
  };
var __awaiter =
  (this && this.__awaiter) ||
  function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P
        ? value
        : new P(function (resolve) {
            resolve(value);
          });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator['throw'](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done
          ? resolve(result.value)
          : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
var __asyncValues =
  (this && this.__asyncValues) ||
  function (o) {
    if (!Symbol.asyncIterator)
      throw new TypeError('Symbol.asyncIterator is not defined.');
    var m = o[Symbol.asyncIterator],
      i;
    return m
      ? m.call(o)
      : ((o =
          typeof __values === 'function' ? __values(o) : o[Symbol.iterator]()),
        (i = {}),
        verb('next'),
        verb('throw'),
        verb('return'),
        (i[Symbol.asyncIterator] = function () {
          return this;
        }),
        i);
    function verb(n) {
      i[n] =
        o[n] &&
        function (v) {
          return new Promise(function (resolve, reject) {
            (v = o[n](v)), settle(resolve, reject, v.done, v.value);
          });
        };
    }
    function settle(resolve, reject, d, v) {
      Promise.resolve(v).then(function (v) {
        resolve({ value: v, done: d });
      }, reject);
    }
  };
var __await =
  (this && this.__await) ||
  function (v) {
    return this instanceof __await ? ((this.v = v), this) : new __await(v);
  };
var __asyncGenerator =
  (this && this.__asyncGenerator) ||
  function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator)
      throw new TypeError('Symbol.asyncIterator is not defined.');
    var g = generator.apply(thisArg, _arguments || []),
      i,
      q = [];
    return (
      (i = {}),
      verb('next'),
      verb('throw'),
      verb('return'),
      (i[Symbol.asyncIterator] = function () {
        return this;
      }),
      i
    );
    function verb(n) {
      if (g[n])
        i[n] = function (v) {
          return new Promise(function (a, b) {
            q.push([n, v, a, b]) > 1 || resume(n, v);
          });
        };
    }
    function resume(n, v) {
      try {
        step(g[n](v));
      } catch (e) {
        settle(q[0][3], e);
      }
    }
    function step(r) {
      r.value instanceof __await
        ? Promise.resolve(r.value.v).then(fulfill, reject)
        : settle(q[0][2], r);
    }
    function fulfill(value) {
      resume('next', value);
    }
    function reject(value) {
      resume('throw', value);
    }
    function settle(f, v) {
      if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
    }
  };
Object.defineProperty(exports, '__esModule', { value: true });
exports.Ngrok = void 0;
const wretch_1 = require('wretch');
const formData = require('form-data');
const url_1 = require('url');
const node_fetch_1 = require('node-fetch');
__exportStar(require('./types'), exports);
wretch_1.default().polyfills({
  fetch: node_fetch_1.default,
  FormData: formData,
  URLSearchParams: url_1.URLSearchParams,
});
class Ngrok {
  /**
   * Creates an instance of the Ngrok REST client
   * @constructor
   * @param {Object} config - config.apiToken and config.baseUrl
   */
  constructor({ baseUrl = 'https://api.ngrok.com', apiToken }) {
    this.AbuseReports = {
      /** Creates a new abuse report which will be reviewed by our system and abuse response team. This API is only available to authorized accounts. Contact abuse@ngrok.com to request access
          
            https://ngrok.com/docs/api#api-abuse-reports-create
            */
      create: arg =>
        this.rest
          .url(`/abuse_reports`)
          .post(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
      /** Get the detailed status of abuse report by ID.
          
            https://ngrok.com/docs/api#api-abuse-reports-get
            */
      get: arg =>
        this.rest
          .url(`/abuse_reports/${arg.id}`)
          .get()
          .json()
          .then(onFulfilled, onRejected),
    };
    this.APIKeys = {
      /** Create a new API key. The generated API key can be used to authenticate to the ngrok API.
          
            https://ngrok.com/docs/api#api-api-keys-create
            */
      create: arg =>
        this.rest
          .url(`/api_keys`)
          .post(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
      /** Delete an API key by ID
          
            https://ngrok.com/docs/api#api-api-keys-delete
            */
      delete: arg =>
        this.rest
          .url(`/api_keys/${arg.id}`)
          .delete()
          .json()
          .then(onFulfilled, onRejected),
      /** Get the details of an API key by ID.
          
            https://ngrok.com/docs/api#api-api-keys-get
            */
      get: arg =>
        this.rest
          .url(`/api_keys/${arg.id}`)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      /** List all API keys owned by this account
          
            https://ngrok.com/docs/api#api-api-keys-list
            */
      list: () =>
        __awaiter(this, void 0, void 0, function* () {
          var e_1, _a;
          const array = [];
          try {
            for (
              var _b = __asyncValues(this.APIKeys._asyncList()), _c;
              (_c = yield _b.next()), !_c.done;

            ) {
              let item = _c.value;
              array.push(item);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
            } finally {
              if (e_1) throw e_1.error;
            }
          }
          return array;
        }),
      _pagedList: arg =>
        this.rest
          .url(`/api_keys`)
          .query(arg)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      _asyncList: function () {
        return __asyncGenerator(this, arguments, function* () {
          const limit = '100';
          let nextPage = 'initial loop';
          let page = { limit: limit };
          while (nextPage) {
            const pagedList = yield __await(this._pagedList(page));
            nextPage = pagedList.next_page_uri;
            const items = pagedList.keys;
            if (nextPage) {
              page = {
                before_id: items[items.length - 1].id,
                limit: limit,
              };
            }
            for (let item of items) {
              yield yield __await(item);
            }
          }
        });
      },
      /** Update attributes of an API key by ID.
          
            https://ngrok.com/docs/api#api-api-keys-update
            */
      update: arg =>
        this.rest
          .url(`/api_keys/${arg.id}`)
          .patch(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
    };
    this.CertificateAuthorities = {
      /** Upload a new Certificate Authority
          
            https://ngrok.com/docs/api#api-certificate-authorities-create
            */
      create: arg =>
        this.rest
          .url(`/certificate_authorities`)
          .post(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
      /** Delete a Certificate Authority
          
            https://ngrok.com/docs/api#api-certificate-authorities-delete
            */
      delete: arg =>
        this.rest
          .url(`/certificate_authorities/${arg.id}`)
          .delete()
          .json()
          .then(onFulfilled, onRejected),
      /** Get detailed information about a certficate authority
          
            https://ngrok.com/docs/api#api-certificate-authorities-get
            */
      get: arg =>
        this.rest
          .url(`/certificate_authorities/${arg.id}`)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      /** List all Certificate Authority on this account
          
            https://ngrok.com/docs/api#api-certificate-authorities-list
            */
      list: () =>
        __awaiter(this, void 0, void 0, function* () {
          var e_2, _d;
          const array = [];
          try {
            for (
              var _e = __asyncValues(this.CertificateAuthorities._asyncList()),
                _f;
              (_f = yield _e.next()), !_f.done;

            ) {
              let item = _f.value;
              array.push(item);
            }
          } catch (e_2_1) {
            e_2 = { error: e_2_1 };
          } finally {
            try {
              if (_f && !_f.done && (_d = _e.return)) yield _d.call(_e);
            } finally {
              if (e_2) throw e_2.error;
            }
          }
          return array;
        }),
      _pagedList: arg =>
        this.rest
          .url(`/certificate_authorities`)
          .query(arg)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      _asyncList: function () {
        return __asyncGenerator(this, arguments, function* () {
          const limit = '100';
          let nextPage = 'initial loop';
          let page = { limit: limit };
          while (nextPage) {
            const pagedList = yield __await(this._pagedList(page));
            nextPage = pagedList.next_page_uri;
            const items = pagedList.certificate_authorities;
            if (nextPage) {
              page = {
                before_id: items[items.length - 1].id,
                limit: limit,
              };
            }
            for (let item of items) {
              yield yield __await(item);
            }
          }
        });
      },
      /** Update attributes of a Certificate Authority by ID
          
            https://ngrok.com/docs/api#api-certificate-authorities-update
            */
      update: arg =>
        this.rest
          .url(`/certificate_authorities/${arg.id}`)
          .patch(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
    };
    this.Credentials = {
      /** Create a new tunnel authtoken credential. This authtoken credential can be used to start a new tunnel session. The response to this API call is the only time the generated token is available. If you need it for future use, you must save it securely yourself.
          
            https://ngrok.com/docs/api#api-credentials-create
            */
      create: arg =>
        this.rest
          .url(`/credentials`)
          .post(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
      /** Delete a tunnel authtoken credential by ID
          
            https://ngrok.com/docs/api#api-credentials-delete
            */
      delete: arg =>
        this.rest
          .url(`/credentials/${arg.id}`)
          .delete()
          .json()
          .then(onFulfilled, onRejected),
      /** Get detailed information about a tunnel authtoken credential
          
            https://ngrok.com/docs/api#api-credentials-get
            */
      get: arg =>
        this.rest
          .url(`/credentials/${arg.id}`)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      /** List all tunnel authtoken credentials on this account
          
            https://ngrok.com/docs/api#api-credentials-list
            */
      list: () =>
        __awaiter(this, void 0, void 0, function* () {
          var e_3, _g;
          const array = [];
          try {
            for (
              var _h = __asyncValues(this.Credentials._asyncList()), _j;
              (_j = yield _h.next()), !_j.done;

            ) {
              let item = _j.value;
              array.push(item);
            }
          } catch (e_3_1) {
            e_3 = { error: e_3_1 };
          } finally {
            try {
              if (_j && !_j.done && (_g = _h.return)) yield _g.call(_h);
            } finally {
              if (e_3) throw e_3.error;
            }
          }
          return array;
        }),
      _pagedList: arg =>
        this.rest
          .url(`/credentials`)
          .query(arg)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      _asyncList: function () {
        return __asyncGenerator(this, arguments, function* () {
          const limit = '100';
          let nextPage = 'initial loop';
          let page = { limit: limit };
          while (nextPage) {
            const pagedList = yield __await(this._pagedList(page));
            nextPage = pagedList.next_page_uri;
            const items = pagedList.credentials;
            if (nextPage) {
              page = {
                before_id: items[items.length - 1].id,
                limit: limit,
              };
            }
            for (let item of items) {
              yield yield __await(item);
            }
          }
        });
      },
      /** Update attributes of an tunnel authtoken credential by ID
          
            https://ngrok.com/docs/api#api-credentials-update
            */
      update: arg =>
        this.rest
          .url(`/credentials/${arg.id}`)
          .patch(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
    };
    this.EndpointConfigurations = {
      /** Create a new endpoint configuration
          
            https://ngrok.com/docs/api#api-endpoint-configurations-create
            */
      create: arg =>
        this.rest
          .url(`/endpoint_configurations`)
          .post(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
      /** Delete an endpoint configuration. This operation will fail if the endpoint configuration is still referenced by any reserved domain or reserved address.
          
            https://ngrok.com/docs/api#api-endpoint-configurations-delete
            */
      delete: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}`)
          .delete()
          .json()
          .then(onFulfilled, onRejected),
      /** Returns detailed information about an endpoint configuration
          
            https://ngrok.com/docs/api#api-endpoint-configurations-get
            */
      get: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}`)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      /** Returns a list of all endpoint configurations on this account
          
            https://ngrok.com/docs/api#api-endpoint-configurations-list
            */
      list: () =>
        __awaiter(this, void 0, void 0, function* () {
          var e_4, _k;
          const array = [];
          try {
            for (
              var _l = __asyncValues(this.EndpointConfigurations._asyncList()),
                _m;
              (_m = yield _l.next()), !_m.done;

            ) {
              let item = _m.value;
              array.push(item);
            }
          } catch (e_4_1) {
            e_4 = { error: e_4_1 };
          } finally {
            try {
              if (_m && !_m.done && (_k = _l.return)) yield _k.call(_l);
            } finally {
              if (e_4) throw e_4.error;
            }
          }
          return array;
        }),
      _pagedList: arg =>
        this.rest
          .url(`/endpoint_configurations`)
          .query(arg)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      _asyncList: function () {
        return __asyncGenerator(this, arguments, function* () {
          const limit = '100';
          let nextPage = 'initial loop';
          let page = { limit: limit };
          while (nextPage) {
            const pagedList = yield __await(this._pagedList(page));
            nextPage = pagedList.next_page_uri;
            const items = pagedList.endpoint_configurations;
            if (nextPage) {
              page = {
                before_id: items[items.length - 1].id,
                limit: limit,
              };
            }
            for (let item of items) {
              yield yield __await(item);
            }
          }
        });
      },
      /** Updates an endpoint configuration. If a module is not specified in the update, it will not be modified. However, each module configuration that is specified will completely replace the existing value. There is no way to delete an existing module via this API, instead use the delete module API.
          
            https://ngrok.com/docs/api#api-endpoint-configurations-update
            */
      update: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}`)
          .patch(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
    };
    this.EventStreams = {
      /** Create a new Event Stream. It will not apply to anything until you associate it with one or more Endpoint Configs.
          
            https://ngrok.com/docs/api#api-event-streams-create
            */
      create: arg =>
        this.rest
          .url(`/event_streams`)
          .post(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
      /** Delete an Event Stream. Associated Event Destinations will be preserved.
          
            https://ngrok.com/docs/api#api-event-streams-delete
            */
      delete: arg =>
        this.rest
          .url(`/event_streams/${arg.id}`)
          .delete()
          .json()
          .then(onFulfilled, onRejected),
      /** Get detailed information about an Event Stream by ID.
          
            https://ngrok.com/docs/api#api-event-streams-get
            */
      get: arg =>
        this.rest
          .url(`/event_streams/${arg.id}`)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      /** List all Event Streams available on this account.
          
            https://ngrok.com/docs/api#api-event-streams-list
            */
      list: () =>
        __awaiter(this, void 0, void 0, function* () {
          var e_5, _o;
          const array = [];
          try {
            for (
              var _p = __asyncValues(this.EventStreams._asyncList()), _q;
              (_q = yield _p.next()), !_q.done;

            ) {
              let item = _q.value;
              array.push(item);
            }
          } catch (e_5_1) {
            e_5 = { error: e_5_1 };
          } finally {
            try {
              if (_q && !_q.done && (_o = _p.return)) yield _o.call(_p);
            } finally {
              if (e_5) throw e_5.error;
            }
          }
          return array;
        }),
      _pagedList: arg =>
        this.rest
          .url(`/event_streams`)
          .query(arg)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      _asyncList: function () {
        return __asyncGenerator(this, arguments, function* () {
          const limit = '100';
          let nextPage = 'initial loop';
          let page = { limit: limit };
          while (nextPage) {
            const pagedList = yield __await(this._pagedList(page));
            nextPage = pagedList.next_page_uri;
            const items = pagedList.event_streams;
            if (nextPage) {
              page = {
                before_id: items[items.length - 1].id,
                limit: limit,
              };
            }
            for (let item of items) {
              yield yield __await(item);
            }
          }
        });
      },
      /** Update attributes of an Event Stream by ID.
          
            https://ngrok.com/docs/api#api-event-streams-update
            */
      update: arg =>
        this.rest
          .url(`/event_streams/${arg.id}`)
          .patch(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
    };
    this.EventDestinations = {
      /** Create a new Event Destination. It will not apply to anything until it is associated with an Event Stream, and that Event Stream is associated with an Endpoint Config.
          
            https://ngrok.com/docs/api#api-event-destinations-create
            */
      create: arg =>
        this.rest
          .url(`/event_destinations`)
          .post(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
      /** Delete an Event Destination. If the Event Destination is still referenced by an Event Stream, this will throw an error until that Event Stream has removed that reference.
          
            https://ngrok.com/docs/api#api-event-destinations-delete
            */
      delete: arg =>
        this.rest
          .url(`/event_destinations/${arg.id}`)
          .delete()
          .json()
          .then(onFulfilled, onRejected),
      /** Get detailed information about an Event Destination by ID.
          
            https://ngrok.com/docs/api#api-event-destinations-get
            */
      get: arg =>
        this.rest
          .url(`/event_destinations/${arg.id}`)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      /** List all Event Destinations on this account.
          
            https://ngrok.com/docs/api#api-event-destinations-list
            */
      list: () =>
        __awaiter(this, void 0, void 0, function* () {
          var e_6, _r;
          const array = [];
          try {
            for (
              var _s = __asyncValues(this.EventDestinations._asyncList()), _t;
              (_t = yield _s.next()), !_t.done;

            ) {
              let item = _t.value;
              array.push(item);
            }
          } catch (e_6_1) {
            e_6 = { error: e_6_1 };
          } finally {
            try {
              if (_t && !_t.done && (_r = _s.return)) yield _r.call(_s);
            } finally {
              if (e_6) throw e_6.error;
            }
          }
          return array;
        }),
      _pagedList: arg =>
        this.rest
          .url(`/event_destinations`)
          .query(arg)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      _asyncList: function () {
        return __asyncGenerator(this, arguments, function* () {
          const limit = '100';
          let nextPage = 'initial loop';
          let page = { limit: limit };
          while (nextPage) {
            const pagedList = yield __await(this._pagedList(page));
            nextPage = pagedList.next_page_uri;
            const items = pagedList.event_destinations;
            if (nextPage) {
              page = {
                before_id: items[items.length - 1].id,
                limit: limit,
              };
            }
            for (let item of items) {
              yield yield __await(item);
            }
          }
        });
      },
      /** Update attributes of an Event Destination.
          
            https://ngrok.com/docs/api#api-event-destinations-update
            */
      update: arg =>
        this.rest
          .url(`/event_destinations/${arg.id}`)
          .patch(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
    };
    this.EventSubscriptions = {
      /** Create an Event Subscription.
          
            https://ngrok.com/docs/api#api-event-subscriptions-create
            */
      create: arg =>
        this.rest
          .url(`/event_subscriptions`)
          .post(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
      /** Delete an Event Subscription.
          
            https://ngrok.com/docs/api#api-event-subscriptions-delete
            */
      delete: arg =>
        this.rest
          .url(`/event_subscriptions/${arg.id}`)
          .delete()
          .json()
          .then(onFulfilled, onRejected),
      /** Get an Event Subscription by ID.
          
            https://ngrok.com/docs/api#api-event-subscriptions-get
            */
      get: arg =>
        this.rest
          .url(`/event_subscriptions/${arg.id}`)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      /** List this Account's Event Subscriptions.
          
            https://ngrok.com/docs/api#api-event-subscriptions-list
            */
      list: () =>
        __awaiter(this, void 0, void 0, function* () {
          var e_7, _u;
          const array = [];
          try {
            for (
              var _v = __asyncValues(this.EventSubscriptions._asyncList()), _w;
              (_w = yield _v.next()), !_w.done;

            ) {
              let item = _w.value;
              array.push(item);
            }
          } catch (e_7_1) {
            e_7 = { error: e_7_1 };
          } finally {
            try {
              if (_w && !_w.done && (_u = _v.return)) yield _u.call(_v);
            } finally {
              if (e_7) throw e_7.error;
            }
          }
          return array;
        }),
      _pagedList: arg =>
        this.rest
          .url(`/event_subscriptions`)
          .query(arg)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      _asyncList: function () {
        return __asyncGenerator(this, arguments, function* () {
          const limit = '100';
          let nextPage = 'initial loop';
          let page = { limit: limit };
          while (nextPage) {
            const pagedList = yield __await(this._pagedList(page));
            nextPage = pagedList.next_page_uri;
            const items = pagedList.event_subscriptions;
            if (nextPage) {
              page = {
                before_id: items[items.length - 1].id,
                limit: limit,
              };
            }
            for (let item of items) {
              yield yield __await(item);
            }
          }
        });
      },
      /** Update an Event Subscription.
          
            https://ngrok.com/docs/api#api-event-subscriptions-update
            */
      update: arg =>
        this.rest
          .url(`/event_subscriptions/${arg.id}`)
          .patch(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
    };
    this.EventSources = {
      /** Add an additional type for which this event subscription will trigger
          
            https://ngrok.com/docs/api#api-event-sources-create
            */
      create: arg =>
        this.rest
          .url(`/event_subscriptions/${arg.subscription_id}/sources`)
          .post(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
      /** Remove a type for which this event subscription will trigger
          
            https://ngrok.com/docs/api#api-event-sources-delete
            */
      delete: arg =>
        this.rest
          .url(
            `/event_subscriptions/${arg.subscription_id}/sources/${arg.type}`
          )
          .delete()
          .json()
          .then(onFulfilled, onRejected),
      /** Get the details for a given type that triggers for the given event subscription
          
            https://ngrok.com/docs/api#api-event-sources-get
            */
      get: arg =>
        this.rest
          .url(
            `/event_subscriptions/${arg.subscription_id}/sources/${arg.type}`
          )
          .get()
          .json()
          .then(onFulfilled, onRejected),
      /** List the types for which this event subscription will trigger
          
            https://ngrok.com/docs/api#api-event-sources-list
            */
      list: arg =>
        this.rest
          .url(`/event_subscriptions/${arg.subscription_id}/sources`)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      /** Update the type for which this event subscription will trigger
          
            https://ngrok.com/docs/api#api-event-sources-update
            */
      update: arg =>
        this.rest
          .url(
            `/event_subscriptions/${arg.subscription_id}/sources/${arg.type}`
          )
          .patch(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
    };
    this.IPPolicies = {
      /** Create a new IP policy. It will not apply to any traffic until you associate to a traffic source via an endpoint configuration or IP restriction.
          
            https://ngrok.com/docs/api#api-ip-policies-create
            */
      create: arg =>
        this.rest
          .url(`/ip_policies`)
          .post(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
      /** Delete an IP policy. If the IP policy is referenced by another object for the purposes of traffic restriction it will be treated as if the IP policy remains but has zero rules.
          
            https://ngrok.com/docs/api#api-ip-policies-delete
            */
      delete: arg =>
        this.rest
          .url(`/ip_policies/${arg.id}`)
          .delete()
          .json()
          .then(onFulfilled, onRejected),
      /** Get detailed information about an IP policy by ID.
          
            https://ngrok.com/docs/api#api-ip-policies-get
            */
      get: arg =>
        this.rest
          .url(`/ip_policies/${arg.id}`)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      /** List all IP policies on this account
          
            https://ngrok.com/docs/api#api-ip-policies-list
            */
      list: () =>
        __awaiter(this, void 0, void 0, function* () {
          var e_8, _x;
          const array = [];
          try {
            for (
              var _y = __asyncValues(this.IPPolicies._asyncList()), _z;
              (_z = yield _y.next()), !_z.done;

            ) {
              let item = _z.value;
              array.push(item);
            }
          } catch (e_8_1) {
            e_8 = { error: e_8_1 };
          } finally {
            try {
              if (_z && !_z.done && (_x = _y.return)) yield _x.call(_y);
            } finally {
              if (e_8) throw e_8.error;
            }
          }
          return array;
        }),
      _pagedList: arg =>
        this.rest
          .url(`/ip_policies`)
          .query(arg)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      _asyncList: function () {
        return __asyncGenerator(this, arguments, function* () {
          const limit = '100';
          let nextPage = 'initial loop';
          let page = { limit: limit };
          while (nextPage) {
            const pagedList = yield __await(this._pagedList(page));
            nextPage = pagedList.next_page_uri;
            const items = pagedList.ip_policies;
            if (nextPage) {
              page = {
                before_id: items[items.length - 1].id,
                limit: limit,
              };
            }
            for (let item of items) {
              yield yield __await(item);
            }
          }
        });
      },
      /** Update attributes of an IP policy by ID
          
            https://ngrok.com/docs/api#api-ip-policies-update
            */
      update: arg =>
        this.rest
          .url(`/ip_policies/${arg.id}`)
          .patch(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
    };
    this.IPPolicyRules = {
      /** Create a new IP policy rule attached to an IP Policy.
          
            https://ngrok.com/docs/api#api-ip-policy-rules-create
            */
      create: arg =>
        this.rest
          .url(`/ip_policy_rules`)
          .post(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
      /** Delete an IP policy rule.
          
            https://ngrok.com/docs/api#api-ip-policy-rules-delete
            */
      delete: arg =>
        this.rest
          .url(`/ip_policy_rules/${arg.id}`)
          .delete()
          .json()
          .then(onFulfilled, onRejected),
      /** Get detailed information about an IP policy rule by ID.
          
            https://ngrok.com/docs/api#api-ip-policy-rules-get
            */
      get: arg =>
        this.rest
          .url(`/ip_policy_rules/${arg.id}`)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      /** List all IP policy rules on this account
          
            https://ngrok.com/docs/api#api-ip-policy-rules-list
            */
      list: () =>
        __awaiter(this, void 0, void 0, function* () {
          var e_9, _0;
          const array = [];
          try {
            for (
              var _1 = __asyncValues(this.IPPolicyRules._asyncList()), _2;
              (_2 = yield _1.next()), !_2.done;

            ) {
              let item = _2.value;
              array.push(item);
            }
          } catch (e_9_1) {
            e_9 = { error: e_9_1 };
          } finally {
            try {
              if (_2 && !_2.done && (_0 = _1.return)) yield _0.call(_1);
            } finally {
              if (e_9) throw e_9.error;
            }
          }
          return array;
        }),
      _pagedList: arg =>
        this.rest
          .url(`/ip_policy_rules`)
          .query(arg)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      _asyncList: function () {
        return __asyncGenerator(this, arguments, function* () {
          const limit = '100';
          let nextPage = 'initial loop';
          let page = { limit: limit };
          while (nextPage) {
            const pagedList = yield __await(this._pagedList(page));
            nextPage = pagedList.next_page_uri;
            const items = pagedList.ip_policy_rules;
            if (nextPage) {
              page = {
                before_id: items[items.length - 1].id,
                limit: limit,
              };
            }
            for (let item of items) {
              yield yield __await(item);
            }
          }
        });
      },
      /** Update attributes of an IP policy rule by ID
          
            https://ngrok.com/docs/api#api-ip-policy-rules-update
            */
      update: arg =>
        this.rest
          .url(`/ip_policy_rules/${arg.id}`)
          .patch(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
    };
    this.IPRestrictions = {
      /** Create a new IP restriction
          
            https://ngrok.com/docs/api#api-ip-restrictions-create
            */
      create: arg =>
        this.rest
          .url(`/ip_restrictions`)
          .post(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
      /** Delete an IP restriction
          
            https://ngrok.com/docs/api#api-ip-restrictions-delete
            */
      delete: arg =>
        this.rest
          .url(`/ip_restrictions/${arg.id}`)
          .delete()
          .json()
          .then(onFulfilled, onRejected),
      /** Get detailed information about an IP restriction
          
            https://ngrok.com/docs/api#api-ip-restrictions-get
            */
      get: arg =>
        this.rest
          .url(`/ip_restrictions/${arg.id}`)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      /** List all IP restrictions on this account
          
            https://ngrok.com/docs/api#api-ip-restrictions-list
            */
      list: () =>
        __awaiter(this, void 0, void 0, function* () {
          var e_10, _3;
          const array = [];
          try {
            for (
              var _4 = __asyncValues(this.IPRestrictions._asyncList()), _5;
              (_5 = yield _4.next()), !_5.done;

            ) {
              let item = _5.value;
              array.push(item);
            }
          } catch (e_10_1) {
            e_10 = { error: e_10_1 };
          } finally {
            try {
              if (_5 && !_5.done && (_3 = _4.return)) yield _3.call(_4);
            } finally {
              if (e_10) throw e_10.error;
            }
          }
          return array;
        }),
      _pagedList: arg =>
        this.rest
          .url(`/ip_restrictions`)
          .query(arg)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      _asyncList: function () {
        return __asyncGenerator(this, arguments, function* () {
          const limit = '100';
          let nextPage = 'initial loop';
          let page = { limit: limit };
          while (nextPage) {
            const pagedList = yield __await(this._pagedList(page));
            nextPage = pagedList.next_page_uri;
            const items = pagedList.ip_restrictions;
            if (nextPage) {
              page = {
                before_id: items[items.length - 1].id,
                limit: limit,
              };
            }
            for (let item of items) {
              yield yield __await(item);
            }
          }
        });
      },
      /** Update attributes of an IP restriction by ID
          
            https://ngrok.com/docs/api#api-ip-restrictions-update
            */
      update: arg =>
        this.rest
          .url(`/ip_restrictions/${arg.id}`)
          .patch(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
    };
    this.IPWhitelist = {
      /** Create a new IP whitelist entry that will restrict traffic to all tunnel endpoints on the account.
          
            https://ngrok.com/docs/api#api-ip-whitelist-create
            */
      create: arg =>
        this.rest
          .url(`/ip_whitelist`)
          .post(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
      /** Delete an IP whitelist entry.
          
            https://ngrok.com/docs/api#api-ip-whitelist-delete
            */
      delete: arg =>
        this.rest
          .url(`/ip_whitelist/${arg.id}`)
          .delete()
          .json()
          .then(onFulfilled, onRejected),
      /** Get detailed information about an IP whitelist entry by ID.
          
            https://ngrok.com/docs/api#api-ip-whitelist-get
            */
      get: arg =>
        this.rest
          .url(`/ip_whitelist/${arg.id}`)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      /** List all IP whitelist entries on this account
          
            https://ngrok.com/docs/api#api-ip-whitelist-list
            */
      list: () =>
        __awaiter(this, void 0, void 0, function* () {
          var e_11, _6;
          const array = [];
          try {
            for (
              var _7 = __asyncValues(this.IPWhitelist._asyncList()), _8;
              (_8 = yield _7.next()), !_8.done;

            ) {
              let item = _8.value;
              array.push(item);
            }
          } catch (e_11_1) {
            e_11 = { error: e_11_1 };
          } finally {
            try {
              if (_8 && !_8.done && (_6 = _7.return)) yield _6.call(_7);
            } finally {
              if (e_11) throw e_11.error;
            }
          }
          return array;
        }),
      _pagedList: arg =>
        this.rest
          .url(`/ip_whitelist`)
          .query(arg)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      _asyncList: function () {
        return __asyncGenerator(this, arguments, function* () {
          const limit = '100';
          let nextPage = 'initial loop';
          let page = { limit: limit };
          while (nextPage) {
            const pagedList = yield __await(this._pagedList(page));
            nextPage = pagedList.next_page_uri;
            const items = pagedList.whitelist;
            if (nextPage) {
              page = {
                before_id: items[items.length - 1].id,
                limit: limit,
              };
            }
            for (let item of items) {
              yield yield __await(item);
            }
          }
        });
      },
      /** Update attributes of an IP whitelist entry by ID
          
            https://ngrok.com/docs/api#api-ip-whitelist-update
            */
      update: arg =>
        this.rest
          .url(`/ip_whitelist/${arg.id}`)
          .patch(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
    };
    this.EndpointLoggingModule = {
      replace: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}/logging`)
          .put(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
      get: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}/logging`)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      delete: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}/logging`)
          .delete()
          .json()
          .then(onFulfilled, onRejected),
    };
    this.EndpointCircuitBreakerModule = {
      replace: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}/circuit_breaker`)
          .put(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
      get: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}/circuit_breaker`)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      delete: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}/circuit_breaker`)
          .delete()
          .json()
          .then(onFulfilled, onRejected),
    };
    this.EndpointCompressionModule = {
      replace: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}/compression`)
          .put(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
      get: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}/compression`)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      delete: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}/compression`)
          .delete()
          .json()
          .then(onFulfilled, onRejected),
    };
    this.EndpointTLSTerminationModule = {
      replace: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}/tls_termination`)
          .put(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
      get: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}/tls_termination`)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      delete: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}/tls_termination`)
          .delete()
          .json()
          .then(onFulfilled, onRejected),
    };
    this.EndpointIPPolicyModule = {
      replace: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}/ip_policy`)
          .put(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
      get: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}/ip_policy`)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      delete: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}/ip_policy`)
          .delete()
          .json()
          .then(onFulfilled, onRejected),
    };
    this.EndpointMutualTLSModule = {
      replace: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}/mutual_tls`)
          .put(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
      get: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}/mutual_tls`)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      delete: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}/mutual_tls`)
          .delete()
          .json()
          .then(onFulfilled, onRejected),
    };
    this.EndpointRequestHeadersModule = {
      replace: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}/request_headers`)
          .put(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
      get: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}/request_headers`)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      delete: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}/request_headers`)
          .delete()
          .json()
          .then(onFulfilled, onRejected),
    };
    this.EndpointResponseHeadersModule = {
      replace: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}/response_headers`)
          .put(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
      get: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}/response_headers`)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      delete: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}/response_headers`)
          .delete()
          .json()
          .then(onFulfilled, onRejected),
    };
    this.EndpointOAuthModule = {
      replace: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}/oauth`)
          .put(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
      get: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}/oauth`)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      delete: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}/oauth`)
          .delete()
          .json()
          .then(onFulfilled, onRejected),
    };
    this.EndpointWebhookValidationModule = {
      replace: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}/webhook_validation`)
          .put(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
      get: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}/webhook_validation`)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      delete: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}/webhook_validation`)
          .delete()
          .json()
          .then(onFulfilled, onRejected),
    };
    this.EndpointSAMLModule = {
      replace: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}/saml`)
          .put(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
      get: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}/saml`)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      delete: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}/saml`)
          .delete()
          .json()
          .then(onFulfilled, onRejected),
    };
    this.EndpointOIDCModule = {
      replace: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}/oidc`)
          .put(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
      get: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}/oidc`)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      delete: arg =>
        this.rest
          .url(`/endpoint_configurations/${arg.id}/oidc`)
          .delete()
          .json()
          .then(onFulfilled, onRejected),
    };
    this.ReservedAddrs = {
      /** Create a new reserved address.
          
            https://ngrok.com/docs/api#api-reserved-addrs-create
            */
      create: arg =>
        this.rest
          .url(`/reserved_addrs`)
          .post(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
      /** Delete a reserved address.
          
            https://ngrok.com/docs/api#api-reserved-addrs-delete
            */
      delete: arg =>
        this.rest
          .url(`/reserved_addrs/${arg.id}`)
          .delete()
          .json()
          .then(onFulfilled, onRejected),
      /** Get the details of a reserved address.
          
            https://ngrok.com/docs/api#api-reserved-addrs-get
            */
      get: arg =>
        this.rest
          .url(`/reserved_addrs/${arg.id}`)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      /** List all reserved addresses on this account.
          
            https://ngrok.com/docs/api#api-reserved-addrs-list
            */
      list: () =>
        __awaiter(this, void 0, void 0, function* () {
          var e_12, _9;
          const array = [];
          try {
            for (
              var _10 = __asyncValues(this.ReservedAddrs._asyncList()), _11;
              (_11 = yield _10.next()), !_11.done;

            ) {
              let item = _11.value;
              array.push(item);
            }
          } catch (e_12_1) {
            e_12 = { error: e_12_1 };
          } finally {
            try {
              if (_11 && !_11.done && (_9 = _10.return)) yield _9.call(_10);
            } finally {
              if (e_12) throw e_12.error;
            }
          }
          return array;
        }),
      _pagedList: arg =>
        this.rest
          .url(`/reserved_addrs`)
          .query(arg)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      _asyncList: function () {
        return __asyncGenerator(this, arguments, function* () {
          const limit = '100';
          let nextPage = 'initial loop';
          let page = { limit: limit };
          while (nextPage) {
            const pagedList = yield __await(this._pagedList(page));
            nextPage = pagedList.next_page_uri;
            const items = pagedList.reserved_addrs;
            if (nextPage) {
              page = {
                before_id: items[items.length - 1].id,
                limit: limit,
              };
            }
            for (let item of items) {
              yield yield __await(item);
            }
          }
        });
      },
      /** Update the attributes of a reserved address.
          
            https://ngrok.com/docs/api#api-reserved-addrs-update
            */
      update: arg =>
        this.rest
          .url(`/reserved_addrs/${arg.id}`)
          .patch(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
      /** Detach the endpoint configuration attached to a reserved address.
          
            https://ngrok.com/docs/api#api-reserved-addrs-delete-endpoint-config
            */
      deleteEndpointConfig: arg =>
        this.rest
          .url(`/reserved_addrs/${arg.id}/endpoint_configuration`)
          .delete()
          .json()
          .then(onFulfilled, onRejected),
    };
    this.ReservedDomains = {
      /** Create a new reserved domain.
          
            https://ngrok.com/docs/api#api-reserved-domains-create
            */
      create: arg =>
        this.rest
          .url(`/reserved_domains`)
          .post(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
      /** Delete a reserved domain.
          
            https://ngrok.com/docs/api#api-reserved-domains-delete
            */
      delete: arg =>
        this.rest
          .url(`/reserved_domains/${arg.id}`)
          .delete()
          .json()
          .then(onFulfilled, onRejected),
      /** Get the details of a reserved domain.
          
            https://ngrok.com/docs/api#api-reserved-domains-get
            */
      get: arg =>
        this.rest
          .url(`/reserved_domains/${arg.id}`)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      /** List all reserved domains on this account.
          
            https://ngrok.com/docs/api#api-reserved-domains-list
            */
      list: () =>
        __awaiter(this, void 0, void 0, function* () {
          var e_13, _12;
          const array = [];
          try {
            for (
              var _13 = __asyncValues(this.ReservedDomains._asyncList()), _14;
              (_14 = yield _13.next()), !_14.done;

            ) {
              let item = _14.value;
              array.push(item);
            }
          } catch (e_13_1) {
            e_13 = { error: e_13_1 };
          } finally {
            try {
              if (_14 && !_14.done && (_12 = _13.return)) yield _12.call(_13);
            } finally {
              if (e_13) throw e_13.error;
            }
          }
          return array;
        }),
      _pagedList: arg =>
        this.rest
          .url(`/reserved_domains`)
          .query(arg)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      _asyncList: function () {
        return __asyncGenerator(this, arguments, function* () {
          const limit = '100';
          let nextPage = 'initial loop';
          let page = { limit: limit };
          while (nextPage) {
            const pagedList = yield __await(this._pagedList(page));
            nextPage = pagedList.next_page_uri;
            const items = pagedList.reserved_domains;
            if (nextPage) {
              page = {
                before_id: items[items.length - 1].id,
                limit: limit,
              };
            }
            for (let item of items) {
              yield yield __await(item);
            }
          }
        });
      },
      /** Update the attributes of a reserved domain.
          
            https://ngrok.com/docs/api#api-reserved-domains-update
            */
      update: arg =>
        this.rest
          .url(`/reserved_domains/${arg.id}`)
          .patch(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
      /** Detach the certificate management policy attached to a reserved domain.
          
            https://ngrok.com/docs/api#api-reserved-domains-delete-certificate-management-policy
            */
      deleteCertificateManagementPolicy: arg =>
        this.rest
          .url(`/reserved_domains/${arg.id}/certificate_management_policy`)
          .delete()
          .json()
          .then(onFulfilled, onRejected),
      /** Detach the certificate attached to a reserved domain.
          
            https://ngrok.com/docs/api#api-reserved-domains-delete-certificate
            */
      deleteCertificate: arg =>
        this.rest
          .url(`/reserved_domains/${arg.id}/certificate`)
          .delete()
          .json()
          .then(onFulfilled, onRejected),
      /** Detach the http endpoint configuration attached to a reserved domain.
          
            https://ngrok.com/docs/api#api-reserved-domains-delete-http-endpoint-config
            */
      deleteHTTPEndpointConfig: arg =>
        this.rest
          .url(`/reserved_domains/${arg.id}/http_endpoint_configuration`)
          .delete()
          .json()
          .then(onFulfilled, onRejected),
      /** Detach the https endpoint configuration attached to a reserved domain.
          
            https://ngrok.com/docs/api#api-reserved-domains-delete-https-endpoint-config
            */
      deleteHTTPSEndpointConfig: arg =>
        this.rest
          .url(`/reserved_domains/${arg.id}/https_endpoint_configuration`)
          .delete()
          .json()
          .then(onFulfilled, onRejected),
    };
    this.SSHCertificateAuthorities = {
      /** Create a new SSH Certificate Authority
          
            https://ngrok.com/docs/api#api-ssh-certificate-authorities-create
            */
      create: arg =>
        this.rest
          .url(`/ssh_certificate_authorities`)
          .post(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
      /** Delete an SSH Certificate Authority
          
            https://ngrok.com/docs/api#api-ssh-certificate-authorities-delete
            */
      delete: arg =>
        this.rest
          .url(`/ssh_certificate_authorities/${arg.id}`)
          .delete()
          .json()
          .then(onFulfilled, onRejected),
      /** Get detailed information about an SSH Certficate Authority
          
            https://ngrok.com/docs/api#api-ssh-certificate-authorities-get
            */
      get: arg =>
        this.rest
          .url(`/ssh_certificate_authorities/${arg.id}`)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      /** List all SSH Certificate Authorities on this account
          
            https://ngrok.com/docs/api#api-ssh-certificate-authorities-list
            */
      list: () =>
        __awaiter(this, void 0, void 0, function* () {
          var e_14, _15;
          const array = [];
          try {
            for (
              var _16 = __asyncValues(
                  this.SSHCertificateAuthorities._asyncList()
                ),
                _17;
              (_17 = yield _16.next()), !_17.done;

            ) {
              let item = _17.value;
              array.push(item);
            }
          } catch (e_14_1) {
            e_14 = { error: e_14_1 };
          } finally {
            try {
              if (_17 && !_17.done && (_15 = _16.return)) yield _15.call(_16);
            } finally {
              if (e_14) throw e_14.error;
            }
          }
          return array;
        }),
      _pagedList: arg =>
        this.rest
          .url(`/ssh_certificate_authorities`)
          .query(arg)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      _asyncList: function () {
        return __asyncGenerator(this, arguments, function* () {
          const limit = '100';
          let nextPage = 'initial loop';
          let page = { limit: limit };
          while (nextPage) {
            const pagedList = yield __await(this._pagedList(page));
            nextPage = pagedList.next_page_uri;
            const items = pagedList.ssh_certificate_authorities;
            if (nextPage) {
              page = {
                before_id: items[items.length - 1].id,
                limit: limit,
              };
            }
            for (let item of items) {
              yield yield __await(item);
            }
          }
        });
      },
      /** Update an SSH Certificate Authority
          
            https://ngrok.com/docs/api#api-ssh-certificate-authorities-update
            */
      update: arg =>
        this.rest
          .url(`/ssh_certificate_authorities/${arg.id}`)
          .patch(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
    };
    this.SSHCredentials = {
      /** Create a new ssh_credential from an uploaded public SSH key. This ssh credential can be used to start new tunnels via ngrok's SSH gateway.
          
            https://ngrok.com/docs/api#api-ssh-credentials-create
            */
      create: arg =>
        this.rest
          .url(`/ssh_credentials`)
          .post(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
      /** Delete an ssh_credential by ID
          
            https://ngrok.com/docs/api#api-ssh-credentials-delete
            */
      delete: arg =>
        this.rest
          .url(`/ssh_credentials/${arg.id}`)
          .delete()
          .json()
          .then(onFulfilled, onRejected),
      /** Get detailed information about an ssh_credential
          
            https://ngrok.com/docs/api#api-ssh-credentials-get
            */
      get: arg =>
        this.rest
          .url(`/ssh_credentials/${arg.id}`)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      /** List all ssh credentials on this account
          
            https://ngrok.com/docs/api#api-ssh-credentials-list
            */
      list: () =>
        __awaiter(this, void 0, void 0, function* () {
          var e_15, _18;
          const array = [];
          try {
            for (
              var _19 = __asyncValues(this.SSHCredentials._asyncList()), _20;
              (_20 = yield _19.next()), !_20.done;

            ) {
              let item = _20.value;
              array.push(item);
            }
          } catch (e_15_1) {
            e_15 = { error: e_15_1 };
          } finally {
            try {
              if (_20 && !_20.done && (_18 = _19.return)) yield _18.call(_19);
            } finally {
              if (e_15) throw e_15.error;
            }
          }
          return array;
        }),
      _pagedList: arg =>
        this.rest
          .url(`/ssh_credentials`)
          .query(arg)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      _asyncList: function () {
        return __asyncGenerator(this, arguments, function* () {
          const limit = '100';
          let nextPage = 'initial loop';
          let page = { limit: limit };
          while (nextPage) {
            const pagedList = yield __await(this._pagedList(page));
            nextPage = pagedList.next_page_uri;
            const items = pagedList.ssh_credentials;
            if (nextPage) {
              page = {
                before_id: items[items.length - 1].id,
                limit: limit,
              };
            }
            for (let item of items) {
              yield yield __await(item);
            }
          }
        });
      },
      /** Update attributes of an ssh_credential by ID
          
            https://ngrok.com/docs/api#api-ssh-credentials-update
            */
      update: arg =>
        this.rest
          .url(`/ssh_credentials/${arg.id}`)
          .patch(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
    };
    this.SSHHostCertificates = {
      /** Create a new SSH Host Certificate
          
            https://ngrok.com/docs/api#api-ssh-host-certificates-create
            */
      create: arg =>
        this.rest
          .url(`/ssh_host_certificates`)
          .post(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
      /** Delete an SSH Host Certificate
          
            https://ngrok.com/docs/api#api-ssh-host-certificates-delete
            */
      delete: arg =>
        this.rest
          .url(`/ssh_host_certificates/${arg.id}`)
          .delete()
          .json()
          .then(onFulfilled, onRejected),
      /** Get detailed information about an SSH Host Certficate
          
            https://ngrok.com/docs/api#api-ssh-host-certificates-get
            */
      get: arg =>
        this.rest
          .url(`/ssh_host_certificates/${arg.id}`)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      /** List all SSH Host Certificates issued on this account
          
            https://ngrok.com/docs/api#api-ssh-host-certificates-list
            */
      list: () =>
        __awaiter(this, void 0, void 0, function* () {
          var e_16, _21;
          const array = [];
          try {
            for (
              var _22 = __asyncValues(this.SSHHostCertificates._asyncList()),
                _23;
              (_23 = yield _22.next()), !_23.done;

            ) {
              let item = _23.value;
              array.push(item);
            }
          } catch (e_16_1) {
            e_16 = { error: e_16_1 };
          } finally {
            try {
              if (_23 && !_23.done && (_21 = _22.return)) yield _21.call(_22);
            } finally {
              if (e_16) throw e_16.error;
            }
          }
          return array;
        }),
      _pagedList: arg =>
        this.rest
          .url(`/ssh_host_certificates`)
          .query(arg)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      _asyncList: function () {
        return __asyncGenerator(this, arguments, function* () {
          const limit = '100';
          let nextPage = 'initial loop';
          let page = { limit: limit };
          while (nextPage) {
            const pagedList = yield __await(this._pagedList(page));
            nextPage = pagedList.next_page_uri;
            const items = pagedList.ssh_host_certificates;
            if (nextPage) {
              page = {
                before_id: items[items.length - 1].id,
                limit: limit,
              };
            }
            for (let item of items) {
              yield yield __await(item);
            }
          }
        });
      },
      /** Update an SSH Host Certificate
          
            https://ngrok.com/docs/api#api-ssh-host-certificates-update
            */
      update: arg =>
        this.rest
          .url(`/ssh_host_certificates/${arg.id}`)
          .patch(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
    };
    this.SSHUserCertificates = {
      /** Create a new SSH User Certificate
          
            https://ngrok.com/docs/api#api-ssh-user-certificates-create
            */
      create: arg =>
        this.rest
          .url(`/ssh_user_certificates`)
          .post(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
      /** Delete an SSH User Certificate
          
            https://ngrok.com/docs/api#api-ssh-user-certificates-delete
            */
      delete: arg =>
        this.rest
          .url(`/ssh_user_certificates/${arg.id}`)
          .delete()
          .json()
          .then(onFulfilled, onRejected),
      /** Get detailed information about an SSH User Certficate
          
            https://ngrok.com/docs/api#api-ssh-user-certificates-get
            */
      get: arg =>
        this.rest
          .url(`/ssh_user_certificates/${arg.id}`)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      /** List all SSH User Certificates issued on this account
          
            https://ngrok.com/docs/api#api-ssh-user-certificates-list
            */
      list: () =>
        __awaiter(this, void 0, void 0, function* () {
          var e_17, _24;
          const array = [];
          try {
            for (
              var _25 = __asyncValues(this.SSHUserCertificates._asyncList()),
                _26;
              (_26 = yield _25.next()), !_26.done;

            ) {
              let item = _26.value;
              array.push(item);
            }
          } catch (e_17_1) {
            e_17 = { error: e_17_1 };
          } finally {
            try {
              if (_26 && !_26.done && (_24 = _25.return)) yield _24.call(_25);
            } finally {
              if (e_17) throw e_17.error;
            }
          }
          return array;
        }),
      _pagedList: arg =>
        this.rest
          .url(`/ssh_user_certificates`)
          .query(arg)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      _asyncList: function () {
        return __asyncGenerator(this, arguments, function* () {
          const limit = '100';
          let nextPage = 'initial loop';
          let page = { limit: limit };
          while (nextPage) {
            const pagedList = yield __await(this._pagedList(page));
            nextPage = pagedList.next_page_uri;
            const items = pagedList.ssh_user_certificates;
            if (nextPage) {
              page = {
                before_id: items[items.length - 1].id,
                limit: limit,
              };
            }
            for (let item of items) {
              yield yield __await(item);
            }
          }
        });
      },
      /** Update an SSH User Certificate
          
            https://ngrok.com/docs/api#api-ssh-user-certificates-update
            */
      update: arg =>
        this.rest
          .url(`/ssh_user_certificates/${arg.id}`)
          .patch(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
    };
    this.TLSCertificates = {
      /** Upload a new TLS certificate
          
            https://ngrok.com/docs/api#api-tls-certificates-create
            */
      create: arg =>
        this.rest
          .url(`/tls_certificates`)
          .post(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
      /** Delete a TLS certificate
          
            https://ngrok.com/docs/api#api-tls-certificates-delete
            */
      delete: arg =>
        this.rest
          .url(`/tls_certificates/${arg.id}`)
          .delete()
          .json()
          .then(onFulfilled, onRejected),
      /** Get detailed information about a TLS certificate
          
            https://ngrok.com/docs/api#api-tls-certificates-get
            */
      get: arg =>
        this.rest
          .url(`/tls_certificates/${arg.id}`)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      /** List all TLS certificates on this account
          
            https://ngrok.com/docs/api#api-tls-certificates-list
            */
      list: () =>
        __awaiter(this, void 0, void 0, function* () {
          var e_18, _27;
          const array = [];
          try {
            for (
              var _28 = __asyncValues(this.TLSCertificates._asyncList()), _29;
              (_29 = yield _28.next()), !_29.done;

            ) {
              let item = _29.value;
              array.push(item);
            }
          } catch (e_18_1) {
            e_18 = { error: e_18_1 };
          } finally {
            try {
              if (_29 && !_29.done && (_27 = _28.return)) yield _27.call(_28);
            } finally {
              if (e_18) throw e_18.error;
            }
          }
          return array;
        }),
      _pagedList: arg =>
        this.rest
          .url(`/tls_certificates`)
          .query(arg)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      _asyncList: function () {
        return __asyncGenerator(this, arguments, function* () {
          const limit = '100';
          let nextPage = 'initial loop';
          let page = { limit: limit };
          while (nextPage) {
            const pagedList = yield __await(this._pagedList(page));
            nextPage = pagedList.next_page_uri;
            const items = pagedList.tls_certificates;
            if (nextPage) {
              page = {
                before_id: items[items.length - 1].id,
                limit: limit,
              };
            }
            for (let item of items) {
              yield yield __await(item);
            }
          }
        });
      },
      /** Update attributes of a TLS Certificate by ID
          
            https://ngrok.com/docs/api#api-tls-certificates-update
            */
      update: arg =>
        this.rest
          .url(`/tls_certificates/${arg.id}`)
          .patch(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
    };
    this.TunnelSessions = {
      /** List all online tunnel sessions running on this account.
          
            https://ngrok.com/docs/api#api-tunnel-sessions-list
            */
      list: () =>
        __awaiter(this, void 0, void 0, function* () {
          var e_19, _30;
          const array = [];
          try {
            for (
              var _31 = __asyncValues(this.TunnelSessions._asyncList()), _32;
              (_32 = yield _31.next()), !_32.done;

            ) {
              let item = _32.value;
              array.push(item);
            }
          } catch (e_19_1) {
            e_19 = { error: e_19_1 };
          } finally {
            try {
              if (_32 && !_32.done && (_30 = _31.return)) yield _30.call(_31);
            } finally {
              if (e_19) throw e_19.error;
            }
          }
          return array;
        }),
      _pagedList: arg =>
        this.rest
          .url(`/tunnel_sessions`)
          .query(arg)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      _asyncList: function () {
        return __asyncGenerator(this, arguments, function* () {
          const limit = '100';
          let nextPage = 'initial loop';
          let page = { limit: limit };
          while (nextPage) {
            const pagedList = yield __await(this._pagedList(page));
            nextPage = pagedList.next_page_uri;
            const items = pagedList.tunnel_sessions;
            if (nextPage) {
              page = {
                before_id: items[items.length - 1].id,
                limit: limit,
              };
            }
            for (let item of items) {
              yield yield __await(item);
            }
          }
        });
      },
      /** Get the detailed status of a tunnel session by ID
          
            https://ngrok.com/docs/api#api-tunnel-sessions-get
            */
      get: arg =>
        this.rest
          .url(`/tunnel_sessions/${arg.id}`)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      /** Issues a command instructing the ngrok agent to restart. The agent restarts itself by calling exec() on platforms that support it. This operation is notably not supported on Windows. When an agent restarts, it reconnects with a new tunnel session ID.
          
            https://ngrok.com/docs/api#api-tunnel-sessions-restart
            */
      restart: arg =>
        this.rest
          .url(`/tunnel_sessions/${arg.id}/restart`)
          .post(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
      /** Issues a command instructing the ngrok agent that started this tunnel session to exit.
          
            https://ngrok.com/docs/api#api-tunnel-sessions-stop
            */
      stop: arg =>
        this.rest
          .url(`/tunnel_sessions/${arg.id}/stop`)
          .post(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
      /** Issues a command instructing the ngrok agent to update itself to the latest version. After this call completes successfully, the ngrok agent will be in the update process. A caller should wait some amount of time to allow the update to complete (at least 10 seconds) before making a call to the Restart endpoint to request that the agent restart itself to start using the new code. This call will never update an ngrok agent to a new major version which could cause breaking compatibility issues. If you wish to update to a new major version, that must be done manually. Still, please be aware that updating your ngrok agent could break your integration. This call will fail in any of the following circumstances: there is no update available the ngrok agent's configuration disabled update checks the agent is currently in process of updating the agent has already successfully updated but has not yet been restarted
          
            https://ngrok.com/docs/api#api-tunnel-sessions-update
            */
      update: arg =>
        this.rest
          .url(`/tunnel_sessions/${arg.id}/update`)
          .post(serializeMap(arg))
          .json()
          .then(onFulfilled, onRejected),
    };
    this.Tunnels = {
      /** List all online tunnels currently running on the account.
          
            https://ngrok.com/docs/api#api-tunnels-list
            */
      list: () =>
        __awaiter(this, void 0, void 0, function* () {
          var e_20, _33;
          const array = [];
          try {
            for (
              var _34 = __asyncValues(this.Tunnels._asyncList()), _35;
              (_35 = yield _34.next()), !_35.done;

            ) {
              let item = _35.value;
              array.push(item);
            }
          } catch (e_20_1) {
            e_20 = { error: e_20_1 };
          } finally {
            try {
              if (_35 && !_35.done && (_33 = _34.return)) yield _33.call(_34);
            } finally {
              if (e_20) throw e_20.error;
            }
          }
          return array;
        }),
      _pagedList: arg =>
        this.rest
          .url(`/tunnels`)
          .query(arg)
          .get()
          .json()
          .then(onFulfilled, onRejected),
      _asyncList: function () {
        return __asyncGenerator(this, arguments, function* () {
          const limit = '100';
          let nextPage = 'initial loop';
          let page = { limit: limit };
          while (nextPage) {
            const pagedList = yield __await(this._pagedList(page));
            nextPage = pagedList.next_page_uri;
            const items = pagedList.tunnels;
            if (nextPage) {
              page = {
                before_id: items[items.length - 1].id,
                limit: limit,
              };
            }
            for (let item of items) {
              yield yield __await(item);
            }
          }
        });
      },
    };
    this.baseUrl = baseUrl;
    if (apiToken) {
      this.token = apiToken;
    } else {
      throw new Error('Cannot create ngrok client without an API token');
    }
    this.rest = wretch_1
      .default()
      .url(baseUrl)
      .headers({
        'User-Agent': 'ngrok-ts-user-agent',
        'Ngrok-Version': '2',
      })
      .content('application/json')
      .auth('Bearer ' + this.token);
  }
}
exports.Ngrok = Ngrok;
function onFulfilled(f) {
  return f;
}
function onRejected(e) {
  let errMsg = JSON.parse(e.message);
  errMsg.details = new Map(Object.entries(errMsg.details));
  throw errMsg;
}
function replacer(key, value) {
  if (value instanceof Map) {
    return Object.fromEntries(value);
  } else {
    return value;
  }
}
function serializeMap(obj) {
  return JSON.stringify(obj, replacer);
}
//# sourceMappingURL=index.js.map
